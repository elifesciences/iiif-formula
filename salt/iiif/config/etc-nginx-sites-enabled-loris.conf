upstream loris {
    server localhost:5004;
}

# Fastly does not forward the Host header but sets the origins' one, we use the custom X-Forwarded-Host:
# https://github.com/elifesciences/builder/blob/master/src/buildercore/fastly/vcl/original-host.vcl
map $http_x_forwarded_host $robots_disallow {
    default "/";
    "~^iiif.elifesciences.org\s*(?:,|$)" "";
}

server {
    listen 80;
    {% if salt['elife.only_on_aws']() %}
    # only useful if not behind ELB
    listen 443 ssl;
    {% endif %}

    {% if salt['elife.only_on_aws']() %}

    # order is significant as the first is used when redirecting requests
    # we want those redirects to go to this server, not iiif prod
    # => "instanceid--iiif.elifesciences.org   iiif.elifesciences.org;"
    server_name {{ salt['elife.cfg']('project.full_hostname') }}
                {{ salt['elife.cfg']('project.project_hostname') }};

    {% else %}
    server_name localhost;
    {% endif %}


    charset     utf-8;
    access_log /var/log/nginx/loris.access.log combined_with_time;
    error_log /var/log/nginx/loris.error.log;

    # Allow using proper IIIF prefixes rather than Loris's syntax
    rewrite ^/({{ pillar.iiif.loris.templates.keys()|join("|") }})/(.*)$ /$1:$2;

    location /favicon.ico {
        return 404;
    }

    location /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-Agent: *\nDisallow: $robots_disallow\n";
    }

    location = /ping {
        add_header Cache-Control "must-revalidate, no-cache, no-store, private";
        add_header Content-Type "text/plain; charset=UTF-8";
        return 200 "pong";
    }

    location = /ping-fastly {
        add_header Cache-Control "must-revalidate, no-cache, no-store, private";
        add_header Content-Type "text/plain; charset=UTF-8";
        return 200 "pong";
    }

    location / {
        uwsgi_pass loris;
        include uwsgi_params;


        # evaulating. taken from:
        # https://github.com/loris-imageserver/loris-docker/blob/development/nginx/nginx.conf
        proxy_redirect     off;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;
    	#proxy_read_timeout 240s;	
        #proxy_send_timeout 240s;
    	#proxy_next_upstream_timeout 300s;


        # '$http_host' looks like 'hostname:portnum'
        # this will preserve the port number when a request is made with a port number in it
        # good for vagrant and testing with your own browser
        proxy_set_header Host $http_host;

        add_header Cache-Control "public, max-age=31536000, immutable";
        # http://agentzh.blogspot.co.uk/2011/03/how-nginx-location-if-works.html
        if ($arg_fallback) {
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header X-Iiif-Fallback 1;
        }

        # https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_intercept_errors
        proxy_intercept_errors on;
        error_page 500 502 = @iiif_fallback;
    }

    location ~ .*/info.json$ {
        uwsgi_pass loris;
        include uwsgi_params;


        # evaulating. taken from:
        # https://github.com/loris-imageserver/loris-docker/blob/development/nginx/nginx.conf
        proxy_redirect     off;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;
    	#proxy_read_timeout 240s;	
        #proxy_send_timeout 240s;
    	#proxy_next_upstream_timeout 300s;


        # '$http_host' looks like 'hostname:portnum'
        # this will preserve the port number when a request is made with a port number in it
        # good for vagrant and testing with your own browser
        proxy_set_header Host $http_host;

        add_header Cache-Control "public, max-age=300";
        if ($arg_fallback) { 
            add_header Cache-Control "public, max-age=300";
            add_header X-Iiif-Fallback 1;
        }

        # https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_intercept_errors
        proxy_intercept_errors on;
        error_page 500 502 = @iiif_fallback_info_json;
    }

    location @iiif_fallback {
        {% for failing_format, fallback in pillar.iiif.fallback.items() %}
        rewrite ^/(.*)\.{{ failing_format }}(.*) /$1.{{ fallback }}$2?fallback=1 last;
        {% endfor %}
    }

    location @iiif_fallback_info_json {
        {% for failing_format, fallback in pillar.iiif.fallback.items() %}
        rewrite ^/(.*)\.{{ failing_format }}(.*) /$1.{{ fallback }}$2?fallback=1 last;
        {% endfor %}
    }
}
