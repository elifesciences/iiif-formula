#!/bin/bash
set -e
# avoids race conditions by stopping the server before attempting to
# clean files and folders in the caches
# also, in case the occupied size is too high to safely execute 
# loris-cache-clean in time, goes for the forest-burning loris-cache-purge
# which deletes everything without taking LRU policies into consideration

if [ "$#" -lt 2 ]; then
    echo "Usage: loris-cache-clean SOFT_MAX_SIZE_KILOBYTES HARD_MAX_SIZE_KILOBYTES"
    echo "Sample: loris-cache-clean 10000000 20000000"
    echo "       will clean the cache with LRU policies if used disk space is more than 10GB"
    echo "       will purge the cache deleting everything if used disk space is more than 20GB"
    exit 1
fi

LOG="/var/log/loris2/cache_clean.log"

current_usage_cache_root () {
    df -k {{ pillar.iiif.loris.storage }} --output=used | sed 1d
}

log_message () {
    echo -ne "$(date +[%c]) [loris-cache-clean] " >> "$LOG"
    echo "$1" >> "$LOG"
}

log_message "Started loris-cache-clean (arguments $1 $2)"

soft_limit="$1"
hard_limit="$2"

usage=$(current_usage_cache_root)
log_message "Cache at $usage kb"
if [ "$usage" -lt "$soft_limit" ]; then
    log_message "Nothing to do"
    exit 0
elif [ "$usage" -lt "$hard_limit" ]; then
    log_message "Starting loris-cache-clean-soft"
    /etc/init.d/nginx stop
    timeout 240 /usr/local/bin/loris-cache-clean-soft "$soft_limit"
    /etc/init.d/nginx start
    log_message "Completed loris-cache-clean-soft"
else
    log_message "Starting loris-cache-clean-hard"
    /etc/init.d/nginx stop
    /usr/local/bin/loris-cache-clean-hard
    /etc/init.d/nginx start
    log_message "Completed loris-cache-clean-hard"
fi

