(config) {

    log {
        output file /var/log/caddy/access.log
        format json {
            time_format rfc3339
        }
    }

    handle /favicon.ico {
        skip_log
        respond "Not Found" 404
    }

    @robots_disallow {
        path /robots.txt
        header X-Forwarded-Host iiif.elifesciences.org*
    }

    handle @robots_disallow {
        header Content-Type text/plain
        respond <<EOF
        User-Agent: *
        Disallow:
        EOF 200
    }

    handle /robots.txt {
        header Content-Type text/plain
        respond <<EOF
        User-Agent: *
        Disallow: /
        EOF 200
    }

    @path-traversal {
        path_regexp ^(\.|\/)\.
    }
    handle @path-traversal {
        error 403
    }

    handle /ping {
        skip_log
        header Cache-Control "must-revalidate, no-cache, no-store, private"
        header Content-Type "text/plain; charset=UTF-8"
        respond "pong" 200
    }

    handle /ping-fastly {
        skip_log
        header Cache-Control "must-revalidate, no-cache, no-store, private"
        header Content-Type "text/plain; charset=UTF-8"
        respond "pong" 200
    }

    handle {
        # rewrite loris prefixes
        @loris_prefix {
            path_regexp loris_prefix ^/({{ pillar.iiif.loris.templates.keys()|join("|") }})/(.*)$
        }
        rewrite @loris_prefix /{http.regexp.loris_prefix_info.1}:{http.regexp.loris_prefix_info.2}

        # header cache control if image
        header * Cache-Control "public, max-age=31536000, immutable"

        # header cache control if info.json
        header *info.json Cache-Control "public, max-age=300"

        reverse_proxy localhost:5004 {
            transport http {
                read_timeout 15s
            }

            # 'fallback' hack.
            # in cases where converting the tiff image throws an exception, request the jpg version instead.
            @fallback {
                status 500 502
            }
            handle_response {
                {% for failing_format, fallback in pillar.iiif.fallback.items() %}
                @loris_fallback_{{ failing_format }} {
                    path_regexp loris_fallback_{{ failing_format }} ^/(.*)\.{{ failing_format }}(.*)$
                }
                rewrite @loris_fallback_{{ failing_format }} /{http.regexp.loris_fallback_{{ failing_format }}.1}.{{ fallback }}{http.regexp.loris_fallback_{{ failing_format }}.2}?fallback=1
                {% endfor %}

                # try again
                reverse_proxy localhost:5004 {
                    transport http {
                        read_timeout 15s
                    }
                }
            }
        }
    }

    respond 404
}

:80 {
    import config
}

{% if salt['elife.cfg']('cfn.outputs.DomainName') %}
:443 {
    import ../snippets/certs
    import config
}
{% endif %}
